<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title></title>
      <link>/showcase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/showcase/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>Fishing Planet - Name change profanity check</title>
      <link>/posts/fishing-planet-name-change-profanity-check/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/fishing-planet-name-change-profanity-check/</guid>
      <description>If we open GameAssembly.dll in IDA pro after running Il2CppDumper to generate ida_py3.py we can search the list of functions and end up finding a function called AbusiveWords::HasAbusiveWords
Function dissassembly sparing the functions code because we don&amp;rsquo;t care about it char __fastcall HasAbusiveWords(__int64 a1, unsigned __int8 a2, __int64 a3, __int64 a4) { } Abusing it with a single hook Because this check is ran client-side and the server never confirms the name contains no profanity we can just create a signature to the function and hook it, then we just return 0, considering this game lacks an Anti-cheat we can use any hooking library we choose, for this example i went with MinHook</description>
      <content>&lt;p&gt;If we open &lt;strong&gt;GameAssembly.dll&lt;/strong&gt; in IDA pro after running &lt;a href=&#34;https://github.com/Perfare/Il2CppDumper&#34;&gt;Il2CppDumper&lt;/a&gt; to generate &lt;strong&gt;ida_py3.py&lt;/strong&gt; we can search the list of functions and end up finding a function called &lt;strong&gt;AbusiveWords::HasAbusiveWords&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;function-dissassembly-sparing-the-functions-code-because-we-dont-care-about-it&#34;&gt;Function dissassembly sparing the functions code because we don&amp;rsquo;t care about it&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HasAbusiveWords&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a1, &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt; a2, &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a3, &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a4) { }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;abusing-it-with-a-single-hook&#34;&gt;Abusing it with a single hook&lt;/h1&gt;
&lt;p&gt;Because this check is ran &lt;strong&gt;client-side&lt;/strong&gt; and the server never confirms the name contains no profanity we can just create a signature to the function and hook it, then we just return 0, considering this game lacks an &lt;code&gt;Anti-cheat&lt;/code&gt; we can use any hooking library we choose, for this example i went with &lt;code&gt;MinHook&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;48 89 5C 24 10 48 89 6C 24 18 56 48 83 EC 20 80 3D ? ? ? ? ? 0F B6 EA 48 8B F1 75 37&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; AbusiveWords__HasAbusiveWords
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;char&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; fn)(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a1, &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt; a2, &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a3, &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a4);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; fn original;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hooked&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a1, &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt; a2, &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a3, &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a4);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; AbusiveWords__HasAbusiveWords&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;hooked(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a1, &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt; a2, &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a3, &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a4)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hook&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (MH_Initialize() &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; MH_OK)&lt;span style=&#34;color:#75715e&#34;&gt;//initialize minhook
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt; has_abusive_words &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; signature_scan&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;scan(x&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GameAssembly.dll&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;48 89 5C 24 10 48 89 6C 24 18 56 48 83 EC 20 80 3D ? ? ? ? ? 0F B6 EA 48 8B F1 75 37&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#75715e&#34;&gt;//scan for the function using the signature we created earlier
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; successfully_hooked &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MH_CreateHook((LPVOID)has_abusive_words, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AbusiveWords__HasAbusiveWords&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;hooked, &lt;span style=&#34;color:#66d9ef&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;LPVOID&lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;AbusiveWords__HasAbusiveWords&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;original)) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; MH_OK;&lt;span style=&#34;color:#75715e&#34;&gt;//create the hook and confirm it was created
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; successfully_enabled &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MH_EnableHook(MH_ALL_HOOKS) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; MH_OK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>The Cycle: Frontier - What went wrong</title>
      <link>/posts/the-cycle-frontier-shutting-down/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/the-cycle-frontier-shutting-down/</guid>
      <description>The ability to teleport turning into the ability to fly Before getting patched you used to be able to teleport by writing your location to a desired location while climbing up a ledge, the developers ended up patching this but in the process to made it so if you were to write CharacterMovement::EMovementMode while climbing up a ledge you would be able to use the flying movement mode, and to restore it back while climbing a ledge again your movement mode would be back to normal again.</description>
      <content>&lt;h1 id=&#34;the-ability-to-teleport-turning-into-the-ability-to-fly&#34;&gt;The ability to teleport turning into the ability to fly&lt;/h1&gt;
&lt;p&gt;Before getting patched you used to be able to teleport by writing your location to a desired location while climbing up a ledge, the developers ended up patching this but in the process to made it so if you were to write &lt;code&gt;CharacterMovement::EMovementMode&lt;/code&gt; while climbing up a ledge you would be able to use the flying movement mode, and to restore it back while climbing a ledge again your movement mode would be back to normal again.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EMovementMode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; uint8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	MOVE_None                      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	MOVE_Walking                   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	MOVE_NavWalking                &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	MOVE_Falling                   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	MOVE_Swimming                  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	MOVE_Flying                    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	MOVE_Custom                    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	MOVE_MAX                       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Flying was abused on the second map to fly into the EXIT of the main boss room, the room was designed for you to fight a boss and get into a loot room with the best gear in the game, and then go through a one-way exit, but being able to fly means you go fly into the exit.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/the-cycle-frontier-boss-location.png&#34; alt=&#34;image info&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;removing-engine-strings&#34;&gt;Removing engine strings&lt;/h1&gt;
&lt;p&gt;An attempt to stop cheaters from finding offsets required to get the necessary information to create wallhack\aimbot\recoil\stamina\etc was to remove &lt;code&gt;Unreal Engine 4&lt;/code&gt; strings people would search for in programs such as &lt;code&gt;IDA pro&lt;/code&gt; to XRef them and get the offsets that were referenced near the string, this resulted in most people using &lt;code&gt;ReClass.Net&lt;/code&gt; to manually find these offsets by using predictable data in the class.&lt;/p&gt;
&lt;h1 id=&#34;uworld-obscuring&#34;&gt;UWorld &amp;ldquo;Obscuring&amp;rdquo;&lt;/h1&gt;
&lt;p&gt;Another attempt at stopping cheaters the developers implemented was to obscure the &lt;code&gt;UWorld&lt;/code&gt; pointer, but this is pretty simple to resolve.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/the-cycle-frontier-uworld.png&#34; alt=&#34;image info&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; offset1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)memory.read&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(mod.base &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; offsets&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;offset1) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt; offset2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; memory.read&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(mod.base &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; offsets&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;offset2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt; offset3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; memory.read&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(mod.base &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; offsets&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;offset3);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (offset1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFFFFFFFBE17B1AB&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (offset2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; offset3 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x41E84EF5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt; uworld &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; memory.read&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;((mod.base &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; offsets&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;uworld) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; index));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;randomizing-class-padding-almost-daily&#34;&gt;Randomizing class padding ALMOST daily&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;ANOTHER&lt;/strong&gt; attempt to stop cheaters was to randomly add padding of random sizes to classes inside the engine, this was also defeated by people using &lt;code&gt;ReClass.Net&lt;/code&gt; and meant that players had to download a &lt;code&gt;100MB&lt;/code&gt; update almost daily, this alone isn&amp;rsquo;t too much of a problem but it becomes more of a problem when after steam downloaded the update it had to patch &lt;code&gt;40GB&lt;/code&gt; of files, this made installing required updates much slower.&lt;/p&gt;
&lt;p&gt;This also meant that commonly used &lt;code&gt;Unreal Engine 4&lt;/code&gt; dumpers became pretty much useless because the padding changed so often it wouldn&amp;rsquo;t be worth updating the offsets for the dumper in the first place.&lt;/p&gt;
&lt;h1 id=&#34;statement-regarding-shutting-down&#34;&gt;Statement regarding shutting down&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;../../img/the-cycle-frontier-statement.png&#34; alt=&#34;image info&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
